#!/bin/bash

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Development environment directory
DEV_DIR=".dev-environment"

# Check if we're in the correct directory
if [ ! -d "$DEV_DIR" ]; then
    echo -e "${RED}Error: Development environment not found. Run the setup script first.${NC}"
    exit 1
fi

cd "$DEV_DIR"

# Helper functions
function check_environment() {
    if ! docker compose ps | grep -q "laravel.test"; then
        echo -e "${YELLOW}Environment is not running. Starting services...${NC}"
        start_environment
    fi
}

function start_environment() {
    echo -e "${BLUE}Starting development environment...${NC}"
    ./vendor/bin/sail up -d

    local services=("mysql" "redis" "web")
    for service in "${services[@]}"; do
        wait_for_service "$service" 30 || {
            echo -e "${RED}Failed to start services${NC}"
            return 1
        }
    done

    echo -e "${GREEN}All services are running!${NC}"
}

function wait_for_service() {
    local service=$1
    local max_attempts=$2
    local attempt=1
    local delay=2

    echo -ne "${BLUE}Waiting for $service..."
    while [ $attempt -le $max_attempts ]; do
        case $service in
            mysql)
                if ./vendor/bin/sail mysql --protocol=tcp -u"$DB_USERNAME" -p"$DB_PASSWORD" -e "SELECT 1" >/dev/null 2>&1; then
                    echo -e "${GREEN}ready!${NC}"
                    return 0
                fi
                ;;
            redis)
                if ./vendor/bin/sail redis-cli ping >/dev/null 2>&1; then
                    echo -e "${GREEN}ready!${NC}"
                    return 0
                fi
                ;;
            web)
                if curl -s http://localhost:${APP_PORT:-8000}/health >/dev/null 2>&1; then
                    echo -e "${GREEN}ready!${NC}"
                    return 0
                fi
                ;;
        esac
        echo -n "."
        sleep $delay
        ((attempt++))
    done

    echo -e "\n${RED}Error: $service did not respond after $max_attempts attempts${NC}"
    return 1
}

# Parse arguments
args=("$@")
command="${args[0]}"
shift
options=("${args[@]}")

case "$command" in
    up|start)
        start_environment
        echo -e "üöÄ ${GREEN}Development environment is available at:${NC} http://localhost:8000"
        echo -e "üìß ${GREEN}Mailpit is available at:${NC} http://localhost:8025"
        ;;
    stop)
        echo -e "${BLUE}Stopping development environment...${NC}"
        ./vendor/bin/sail stop
        ;;
    restart)
        echo -e "${BLUE}Restarting development environment...${NC}"
        ./vendor/bin/sail down
        start_environment
        ;;
    *)
        if [[ "$command" != "help" && "$command" != "destroy" ]]; then
            check_environment
        fi

        case "$command" in
            shell)
                ./vendor/bin/sail shell
                ;;
            root-shell)
                ./vendor/bin/sail root-shell
                ;;
            test)
                ./vendor/bin/sail test "${options[@]}"
                ;;
            tinker)
                ./vendor/bin/sail tinker
                ;;
            db)
                ./vendor/bin/sail mysql
                ;;
            redis)
                ./vendor/bin/sail redis
                ;;
            reset-db)
                echo -e "${BLUE}Resetting database...${NC}"
                ./vendor/bin/sail artisan migrate:fresh --seed
                ;;
            php)
                ./vendor/bin/sail php "${options[@]}"
                ;;
            composer)
                ./vendor/bin/sail composer "${options[@]}"
                ;;
            artisan|art)
                ./vendor/bin/sail artisan "${options[@]}"
                ;;
            npm)
                ./vendor/bin/sail npm "${options[@]}"
                ;;
            clear)
                echo -e "${BLUE}Clearing application cache...${NC}"
                ./vendor/bin/sail artisan optimize:clear
                ;;
            rebuild)
                cd ..
                ./setup.sh
                ;;
            destroy)
                echo -e "${YELLOW}Destroying development environment...${NC}"
                ./vendor/bin/sail down -v
                cd ..
                rm -rf "$DEV_DIR"
                echo -e "üóëÔ∏è  ${GREEN}Development environment removed${NC}"
                ;;
            logs)
                ./vendor/bin/sail logs "${options[@]}"
                ;;
            *)
                echo "Usage: ./dev [command] [options]"
                echo ""
                echo "Available commands:"
                echo "  up, start     - Start containers"
                echo "  stop          - Stop containers"
                echo "  restart       - Restart containers"
                echo "  shell         - Access application shell"
                echo "  root-shell    - Access shell as root"
                echo "  test          - Run tests"
                echo "  tinker        - Start tinker REPL"
                echo "  db           - Access MySQL CLI"
                echo "  redis        - Access Redis CLI"
                echo "  reset-db     - Reset database and run seeders"
                echo "  php          - Execute PHP command"
                echo "  composer     - Execute Composer command"
                echo "  artisan, art - Execute Artisan command"
                echo "  npm          - Execute NPM command"
                echo "  clear        - Clear application cache"
                echo "  logs         - View container logs"
                echo "  rebuild      - Rebuild development environment"
                echo "  destroy      - Remove development environment"
                ;;
        esac
        ;;
esac